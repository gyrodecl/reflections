Q: What happens when you initialize a repository? Why do
   you need to do it?
A: This creates an empty git repository. This adds an empty .git/ folder
inside your folder to add more metadata.  It can track your changes.Any
files that are currently in the folder are marked as "untracked."

Q:How is the staging area different from the working directory and
the repository? What value do you think it offers?
A:The staging area lets us choose which files we want to commit from the working
directory to the repository.  It allows us to selectively choose which files to commit
and at certain times.  It lets us have more granular control over the commits.

Q:How can you use the staging area to make sure you have one
commit per logical change?
A:We can run git diff --staged to see how the staging area
will compare to the previously run commits. We can see what code is changed and
verify that it's a logical change.

Q:What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
A:Branches help when we want to try out an experimental version of our code
or want to try something that could totally break the codebase.

Q:How do the diagrams help you visualize the branch structure?
A:We can see which commits were present at the time of the new branch
and which were unique to the branch and which were added to the main branch
after the separate branch was spun off.  So we can see which code is in which file.

Q:What is the result of merging two branches together?
Why do we represent it in the diagram the way we do?
A:It merges 1 branch into another.  It creates a new commit where
the previous commits from both branches now point to this new one.

Q:What are the pros and cons of Git’s automatic merging vs.
always doing merges manually?
A:The pros of automatic merging is that it can save you time.
git only prompts conflict detection when there's similar code in the
same area.  The con is that it can sometimes include lines you don't want
in your final file.